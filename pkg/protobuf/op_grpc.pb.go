// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpServiceClient is the client API for OpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpServiceClient interface {
	FetchOps(ctx context.Context, in *FetchOpsRequest, opts ...grpc.CallOption) (OpService_FetchOpsClient, error)
	SendOp(ctx context.Context, in *SendOpRequest, opts ...grpc.CallOption) (*SendOpResult, error)
}

type opServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpServiceClient(cc grpc.ClientConnInterface) OpServiceClient {
	return &opServiceClient{cc}
}

func (c *opServiceClient) FetchOps(ctx context.Context, in *FetchOpsRequest, opts ...grpc.CallOption) (OpService_FetchOpsClient, error) {
	stream, err := c.cc.NewStream(ctx, &OpService_ServiceDesc.Streams[0], "/op.OpService/FetchOps", opts...)
	if err != nil {
		return nil, err
	}
	x := &opServiceFetchOpsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OpService_FetchOpsClient interface {
	Recv() (*Operation, error)
	grpc.ClientStream
}

type opServiceFetchOpsClient struct {
	grpc.ClientStream
}

func (x *opServiceFetchOpsClient) Recv() (*Operation, error) {
	m := new(Operation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *opServiceClient) SendOp(ctx context.Context, in *SendOpRequest, opts ...grpc.CallOption) (*SendOpResult, error) {
	out := new(SendOpResult)
	err := c.cc.Invoke(ctx, "/op.OpService/SendOp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpServiceServer is the server API for OpService service.
// All implementations must embed UnimplementedOpServiceServer
// for forward compatibility
type OpServiceServer interface {
	FetchOps(*FetchOpsRequest, OpService_FetchOpsServer) error
	SendOp(context.Context, *SendOpRequest) (*SendOpResult, error)
	mustEmbedUnimplementedOpServiceServer()
}

// UnimplementedOpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOpServiceServer struct {
}

func (UnimplementedOpServiceServer) FetchOps(*FetchOpsRequest, OpService_FetchOpsServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchOps not implemented")
}
func (UnimplementedOpServiceServer) SendOp(context.Context, *SendOpRequest) (*SendOpResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOp not implemented")
}
func (UnimplementedOpServiceServer) mustEmbedUnimplementedOpServiceServer() {}

// UnsafeOpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpServiceServer will
// result in compilation errors.
type UnsafeOpServiceServer interface {
	mustEmbedUnimplementedOpServiceServer()
}

func RegisterOpServiceServer(s grpc.ServiceRegistrar, srv OpServiceServer) {
	s.RegisterService(&OpService_ServiceDesc, srv)
}

func _OpService_FetchOps_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchOpsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpServiceServer).FetchOps(m, &opServiceFetchOpsServer{stream})
}

type OpService_FetchOpsServer interface {
	Send(*Operation) error
	grpc.ServerStream
}

type opServiceFetchOpsServer struct {
	grpc.ServerStream
}

func (x *opServiceFetchOpsServer) Send(m *Operation) error {
	return x.ServerStream.SendMsg(m)
}

func _OpService_SendOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).SendOp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/op.OpService/SendOp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).SendOp(ctx, req.(*SendOpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpService_ServiceDesc is the grpc.ServiceDesc for OpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "op.OpService",
	HandlerType: (*OpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendOp",
			Handler:    _OpService_SendOp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchOps",
			Handler:       _OpService_FetchOps_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "op.proto",
}
